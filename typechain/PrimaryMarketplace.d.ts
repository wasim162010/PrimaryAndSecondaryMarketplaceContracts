/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PrimaryMarketplaceInterface extends ethers.utils.Interface {
  functions: {
    "acceptOffer(uint256,uint256,address,bytes)": FunctionFragment;
    "auctionItemId()": FunctionFragment;
    "buyItemFixedPrice(uint256)": FunctionFragment;
    "cancelAuction(uint256)": FunctionFragment;
    "comission()": FunctionFragment;
    "finishAuction(uint256,uint256,address,bytes)": FunctionFragment;
    "fixedItemId()": FunctionFragment;
    "getAuctionItem(uint256)": FunctionFragment;
    "getFixedPriceItem(uint256)": FunctionFragment;
    "getOfferItem(uint256)": FunctionFragment;
    "initialize(address,uint8)": FunctionFragment;
    "listAuction(address,uint96,uint128,uint128,uint16,uint8,string,bytes)": FunctionFragment;
    "listItemFixedPrice(address,uint96,uint128,uint128,uint16,uint8,string,bytes)": FunctionFragment;
    "listOfferItem(address,uint128,uint128,uint16,uint8,string,bytes)": FunctionFragment;
    "offerItemId()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setComission(uint8)": FunctionFragment;
    "setValidator(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalComissions()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlistItemFixedPrice(uint256)": FunctionFragment;
    "unlistOfferItem(uint256)": FunctionFragment;
    "validator()": FunctionFragment;
    "withdrawComission()": FunctionFragment;
    "withdrawERC1155(address,uint256[],uint256[])": FunctionFragment;
    "withdrawERC20(address,uint256)": FunctionFragment;
    "withdrawERC721(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionItemId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyItemFixedPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "comission", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finishAuction",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedItemId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFixedPriceItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOfferItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listAuction",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listItemFixedPrice",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listOfferItem",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "offerItemId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setComission",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalComissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlistItemFixedPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlistOfferItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "validator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawComission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC1155",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionItemId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyItemFixedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "comission", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixedItemId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFixedPriceItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOfferItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listItemFixedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listOfferItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerItemId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setComission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalComissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlistItemFixedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlistOfferItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawComission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;

  events: {
    "AcceptedOffer(uint256,address,uint256)": EventFragment;
    "BoughtFixedPrice(uint256,address)": EventFragment;
    "CanceledAuction(uint256,uint256)": EventFragment;
    "FinishedAuction(uint256,uint256,address)": EventFragment;
    "ListedAuction(address,uint256)": EventFragment;
    "ListedFixedPrice(address,uint256)": EventFragment;
    "ListedOffer(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UnlistedFixedPrice(uint256,uint256)": EventFragment;
    "UnlistedOffer(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptedOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoughtFixedPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CanceledAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinishedAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListedAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListedFixedPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListedOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlistedFixedPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlistedOffer"): EventFragment;
}

export type AcceptedOfferEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    offerItemId: BigNumber;
    buyer: string;
    price: BigNumber;
  }
>;

export type BoughtFixedPriceEvent = TypedEvent<
  [BigNumber, string] & { fixedItemId: BigNumber; buyer: string }
>;

export type CanceledAuctionEvent = TypedEvent<
  [BigNumber, BigNumber] & { auctionItemId: BigNumber; tokenId: BigNumber }
>;

export type FinishedAuctionEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    auctionItemId: BigNumber;
    lastBid: BigNumber;
    buyer: string;
  }
>;

export type ListedAuctionEvent = TypedEvent<
  [string, BigNumber] & { account: string; auctionItemId: BigNumber }
>;

export type ListedFixedPriceEvent = TypedEvent<
  [string, BigNumber] & { account: string; fixedItemId: BigNumber }
>;

export type ListedOfferEvent = TypedEvent<
  [string, BigNumber] & { account: string; offerItemId: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type UnlistedFixedPriceEvent = TypedEvent<
  [BigNumber, BigNumber] & { fixedItemId: BigNumber; tokenId: BigNumber }
>;

export type UnlistedOfferEvent = TypedEvent<
  [BigNumber, BigNumber] & { offerItemId: BigNumber; tokenId: BigNumber }
>;

export class PrimaryMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PrimaryMarketplaceInterface;

  functions: {
    acceptOffer(
      itemId: BigNumberish,
      bid: BigNumberish,
      buyer: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctionItemId(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyItemFixedPrice(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelAuction(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    comission(overrides?: CallOverrides): Promise<[number]>;

    finishAuction(
      itemId: BigNumberish,
      bid: BigNumberish,
      buyer: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fixedItemId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAuctionItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number,
        number,
        number,
        string
      ] & {
        asset: string;
        startPrice: BigNumber;
        tokenId: BigNumber;
        amount: BigNumber;
        seller: string;
        feeNumerator: number;
        assetType: number;
        status: number;
        uri: string;
      }
    >;

    getFixedPriceItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number,
        number,
        number,
        string
      ] & {
        asset: string;
        startPrice: BigNumber;
        tokenId: BigNumber;
        amount: BigNumber;
        seller: string;
        feeNumerator: number;
        assetType: number;
        status: number;
        uri: string;
      }
    >;

    getOfferItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, number, number, number, string] & {
        asset: string;
        tokenId: BigNumber;
        amount: BigNumber;
        seller: string;
        feeNumerator: number;
        assetType: number;
        status: number;
        uri: string;
      }
    >;

    initialize(
      validator_: string,
      comission_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    listAuction(
      asset: string,
      startPrice: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      feeNumerator: BigNumberish,
      assetType: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    listItemFixedPrice(
      asset: string,
      price: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      feeNumerator: BigNumberish,
      assetType: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    listOfferItem(
      asset: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      feeNumerator: BigNumberish,
      assetType: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    offerItemId(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setComission(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValidator(
      validator_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalComissions(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlistItemFixedPrice(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlistOfferItem(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validator(overrides?: CallOverrides): Promise<[string]>;

    withdrawComission(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC1155(
      asset: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721(
      asset: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOffer(
    itemId: BigNumberish,
    bid: BigNumberish,
    buyer: string,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctionItemId(overrides?: CallOverrides): Promise<BigNumber>;

  buyItemFixedPrice(
    itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelAuction(
    itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  comission(overrides?: CallOverrides): Promise<number>;

  finishAuction(
    itemId: BigNumberish,
    bid: BigNumberish,
    buyer: string,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fixedItemId(overrides?: CallOverrides): Promise<BigNumber>;

  getAuctionItem(
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      number,
      number,
      number,
      string
    ] & {
      asset: string;
      startPrice: BigNumber;
      tokenId: BigNumber;
      amount: BigNumber;
      seller: string;
      feeNumerator: number;
      assetType: number;
      status: number;
      uri: string;
    }
  >;

  getFixedPriceItem(
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      number,
      number,
      number,
      string
    ] & {
      asset: string;
      startPrice: BigNumber;
      tokenId: BigNumber;
      amount: BigNumber;
      seller: string;
      feeNumerator: number;
      assetType: number;
      status: number;
      uri: string;
    }
  >;

  getOfferItem(
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, number, number, number, string] & {
      asset: string;
      tokenId: BigNumber;
      amount: BigNumber;
      seller: string;
      feeNumerator: number;
      assetType: number;
      status: number;
      uri: string;
    }
  >;

  initialize(
    validator_: string,
    comission_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  listAuction(
    asset: string,
    startPrice: BigNumberish,
    tokenId: BigNumberish,
    amount: BigNumberish,
    feeNumerator: BigNumberish,
    assetType: BigNumberish,
    uri: string,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  listItemFixedPrice(
    asset: string,
    price: BigNumberish,
    tokenId: BigNumberish,
    amount: BigNumberish,
    feeNumerator: BigNumberish,
    assetType: BigNumberish,
    uri: string,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  listOfferItem(
    asset: string,
    tokenId: BigNumberish,
    amount: BigNumberish,
    feeNumerator: BigNumberish,
    assetType: BigNumberish,
    uri: string,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  offerItemId(overrides?: CallOverrides): Promise<BigNumber>;

  onERC1155BatchReceived(
    operator: string,
    from: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155Received(
    _operator: string,
    _from: string,
    _id: BigNumberish,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setComission(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValidator(
    validator_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalComissions(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlistItemFixedPrice(
    itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlistOfferItem(
    itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validator(overrides?: CallOverrides): Promise<string>;

  withdrawComission(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC1155(
    asset: string,
    tokenIds: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721(
    asset: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOffer(
      itemId: BigNumberish,
      bid: BigNumberish,
      buyer: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    auctionItemId(overrides?: CallOverrides): Promise<BigNumber>;

    buyItemFixedPrice(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAuction(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    comission(overrides?: CallOverrides): Promise<number>;

    finishAuction(
      itemId: BigNumberish,
      bid: BigNumberish,
      buyer: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    fixedItemId(overrides?: CallOverrides): Promise<BigNumber>;

    getAuctionItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number,
        number,
        number,
        string
      ] & {
        asset: string;
        startPrice: BigNumber;
        tokenId: BigNumber;
        amount: BigNumber;
        seller: string;
        feeNumerator: number;
        assetType: number;
        status: number;
        uri: string;
      }
    >;

    getFixedPriceItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number,
        number,
        number,
        string
      ] & {
        asset: string;
        startPrice: BigNumber;
        tokenId: BigNumber;
        amount: BigNumber;
        seller: string;
        feeNumerator: number;
        assetType: number;
        status: number;
        uri: string;
      }
    >;

    getOfferItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, number, number, number, string] & {
        asset: string;
        tokenId: BigNumber;
        amount: BigNumber;
        seller: string;
        feeNumerator: number;
        assetType: number;
        status: number;
        uri: string;
      }
    >;

    initialize(
      validator_: string,
      comission_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    listAuction(
      asset: string,
      startPrice: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      feeNumerator: BigNumberish,
      assetType: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    listItemFixedPrice(
      asset: string,
      price: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      feeNumerator: BigNumberish,
      assetType: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    listOfferItem(
      asset: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      feeNumerator: BigNumberish,
      assetType: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    offerItemId(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setComission(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidator(validator_: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalComissions(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlistItemFixedPrice(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unlistOfferItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validator(overrides?: CallOverrides): Promise<string>;

    withdrawComission(overrides?: CallOverrides): Promise<void>;

    withdrawERC1155(
      asset: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721(
      asset: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AcceptedOffer(uint256,address,uint256)"(
      offerItemId?: BigNumberish | null,
      buyer?: null,
      price?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { offerItemId: BigNumber; buyer: string; price: BigNumber }
    >;

    AcceptedOffer(
      offerItemId?: BigNumberish | null,
      buyer?: null,
      price?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { offerItemId: BigNumber; buyer: string; price: BigNumber }
    >;

    "BoughtFixedPrice(uint256,address)"(
      fixedItemId?: BigNumberish | null,
      buyer?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { fixedItemId: BigNumber; buyer: string }
    >;

    BoughtFixedPrice(
      fixedItemId?: BigNumberish | null,
      buyer?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { fixedItemId: BigNumber; buyer: string }
    >;

    "CanceledAuction(uint256,uint256)"(
      auctionItemId?: BigNumberish | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { auctionItemId: BigNumber; tokenId: BigNumber }
    >;

    CanceledAuction(
      auctionItemId?: BigNumberish | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { auctionItemId: BigNumber; tokenId: BigNumber }
    >;

    "FinishedAuction(uint256,uint256,address)"(
      auctionItemId?: BigNumberish | null,
      lastBid?: BigNumberish | null,
      buyer?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { auctionItemId: BigNumber; lastBid: BigNumber; buyer: string }
    >;

    FinishedAuction(
      auctionItemId?: BigNumberish | null,
      lastBid?: BigNumberish | null,
      buyer?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { auctionItemId: BigNumber; lastBid: BigNumber; buyer: string }
    >;

    "ListedAuction(address,uint256)"(
      account?: string | null,
      auctionItemId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; auctionItemId: BigNumber }
    >;

    ListedAuction(
      account?: string | null,
      auctionItemId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; auctionItemId: BigNumber }
    >;

    "ListedFixedPrice(address,uint256)"(
      account?: string | null,
      fixedItemId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; fixedItemId: BigNumber }
    >;

    ListedFixedPrice(
      account?: string | null,
      fixedItemId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; fixedItemId: BigNumber }
    >;

    "ListedOffer(address,uint256)"(
      account?: string | null,
      offerItemId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; offerItemId: BigNumber }
    >;

    ListedOffer(
      account?: string | null,
      offerItemId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; offerItemId: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "UnlistedFixedPrice(uint256,uint256)"(
      fixedItemId?: BigNumberish | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { fixedItemId: BigNumber; tokenId: BigNumber }
    >;

    UnlistedFixedPrice(
      fixedItemId?: BigNumberish | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { fixedItemId: BigNumber; tokenId: BigNumber }
    >;

    "UnlistedOffer(uint256,uint256)"(
      offerItemId?: BigNumberish | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { offerItemId: BigNumber; tokenId: BigNumber }
    >;

    UnlistedOffer(
      offerItemId?: BigNumberish | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { offerItemId: BigNumber; tokenId: BigNumber }
    >;
  };

  estimateGas: {
    acceptOffer(
      itemId: BigNumberish,
      bid: BigNumberish,
      buyer: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctionItemId(overrides?: CallOverrides): Promise<BigNumber>;

    buyItemFixedPrice(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelAuction(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    comission(overrides?: CallOverrides): Promise<BigNumber>;

    finishAuction(
      itemId: BigNumberish,
      bid: BigNumberish,
      buyer: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fixedItemId(overrides?: CallOverrides): Promise<BigNumber>;

    getAuctionItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFixedPriceItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOfferItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      validator_: string,
      comission_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    listAuction(
      asset: string,
      startPrice: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      feeNumerator: BigNumberish,
      assetType: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    listItemFixedPrice(
      asset: string,
      price: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      feeNumerator: BigNumberish,
      assetType: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    listOfferItem(
      asset: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      feeNumerator: BigNumberish,
      assetType: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    offerItemId(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setComission(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValidator(
      validator_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalComissions(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlistItemFixedPrice(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlistOfferItem(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validator(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawComission(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC1155(
      asset: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC721(
      asset: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOffer(
      itemId: BigNumberish,
      bid: BigNumberish,
      buyer: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctionItemId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyItemFixedPrice(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelAuction(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    comission(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finishAuction(
      itemId: BigNumberish,
      bid: BigNumberish,
      buyer: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fixedItemId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAuctionItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFixedPriceItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOfferItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      validator_: string,
      comission_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    listAuction(
      asset: string,
      startPrice: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      feeNumerator: BigNumberish,
      assetType: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    listItemFixedPrice(
      asset: string,
      price: BigNumberish,
      tokenId: BigNumberish,
      amount: BigNumberish,
      feeNumerator: BigNumberish,
      assetType: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    listOfferItem(
      asset: string,
      tokenId: BigNumberish,
      amount: BigNumberish,
      feeNumerator: BigNumberish,
      assetType: BigNumberish,
      uri: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    offerItemId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      _operator: string,
      _from: string,
      _id: BigNumberish,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setComission(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValidator(
      validator_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalComissions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlistItemFixedPrice(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlistOfferItem(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawComission(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC1155(
      asset: string,
      tokenIds: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      asset: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
